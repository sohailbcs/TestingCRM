// <auto-generated />
using System;
using LegalAndGeneralConsultantCRM.Areas.Identity.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LegalAndGeneralConsultantCRM.Migrations
{
    [DbContext(typeof(LegalAndGeneralConsultantCRMContext))]
    [Migration("20240719055917_newfeild")]
    partial class newfeild
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.23")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("LegalAndGeneralConsultantCRM.Areas.Identity.Data.LegalAndGeneralConsultantCRMUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Department")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("EmailOrPhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfileImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SelectedServiceId")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TeamMemeberType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("LegalAndGeneralConsultantCRM.Models.ActivitiesLog.ActivityLog", b =>
                {
                    b.Property<int>("ActivityLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ActivityLogId"), 1L, 1);

                    b.Property<string>("Action")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ActivityLogDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LeadId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ActivityLogId");

                    b.HasIndex("LeadId");

                    b.HasIndex("UserId");

                    b.ToTable("ActivityLogs");
                });

            modelBuilder.Entity("LegalAndGeneralConsultantCRM.Models.Branches.Branch", b =>
                {
                    b.Property<int>("BranchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BranchId"), 1L, 1);

                    b.Property<string>("BranchCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BranchName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BranchId");

                    b.ToTable("Branches");
                });

            modelBuilder.Entity("LegalAndGeneralConsultantCRM.Models.CalendarEvents.CalendarEvent", b =>
                {
                    b.Property<int>("CalendarEventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CalendarEventId"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EventDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LeadId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("ThemeColor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CalendarEventId");

                    b.HasIndex("LeadId");

                    b.ToTable("CalendarEvents");
                });

            modelBuilder.Entity("LegalAndGeneralConsultantCRM.Models.Deposits.Deposit", b =>
                {
                    b.Property<int>("DepositId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepositId"), 1L, 1);

                    b.Property<decimal?>("AccountNumber")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("AccountTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("DepositDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DepositPayImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LeadId")
                        .HasColumnType("int");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("DepositId");

                    b.HasIndex("LeadId");

                    b.HasIndex("StudentId");

                    b.ToTable("Deposits");
                });

            modelBuilder.Entity("LegalAndGeneralConsultantCRM.Models.LeadAssignEmployee", b =>
                {
                    b.Property<string>("EmployeeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("LeadId")
                        .HasColumnType("int");

                    b.Property<int>("AllocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AllocationId"), 1L, 1);

                    b.Property<DateTime>("AssignmentDate")
                        .HasColumnType("datetime2");

                    b.HasKey("EmployeeId", "LeadId");

                    b.HasIndex("LeadId");

                    b.ToTable("LeadAssignEmployees");
                });

            modelBuilder.Entity("LegalAndGeneralConsultantCRM.Models.LeadFollowUp.FollowUp", b =>
                {
                    b.Property<int>("FollowUpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FollowUpId"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("FollowUpCompleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("FollowUpDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LeadId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Reminder")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FollowUpId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("LeadId");

                    b.ToTable("FollowUps");
                });

            modelBuilder.Entity("LegalAndGeneralConsultantCRM.Models.Leads.Lead", b =>
                {
                    b.Property<int>("LeadId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LeadId"), 1L, 1);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Industry")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsEnrolled")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsLeadAssign")
                        .HasColumnType("bit");

                    b.Property<string>("JobTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LeadSource")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LeadSourceDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ReferralId")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LeadId");

                    b.HasIndex("ReferralId");

                    b.ToTable("Leads");
                });

            modelBuilder.Entity("LegalAndGeneralConsultantCRM.Models.Leads.LeadConversionDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BalancePayment")
                        .HasColumnType("int");

                    b.Property<int>("DownPayment")
                        .HasColumnType("int");

                    b.Property<int>("ReferralId")
                        .HasColumnType("int");

                    b.Property<int>("SalePrice")
                        .HasColumnType("int");

                    b.Property<int>("SoldProduct")
                        .HasColumnType("int");

                    b.Property<int>("SoldProject")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LeadConversionDetails");
                });

            modelBuilder.Entity("LegalAndGeneralConsultantCRM.Models.Leads.LeadHistory", b =>
                {
                    b.Property<int>("LeadHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LeadHistoryId"), 1L, 1);

                    b.Property<DateTime?>("LeadFollowupDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LeadId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LeadHistoryId");

                    b.HasIndex("LeadId");

                    b.HasIndex("UserId");

                    b.ToTable("LeadHistories");
                });

            modelBuilder.Entity("LegalAndGeneralConsultantCRM.Models.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"), 1L, 1);

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NotificationId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("LegalAndGeneralConsultantCRM.Models.ProgramsTalk.ProgramInTalk", b =>
                {
                    b.Property<int>("ProgramTalkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProgramTalkId"), 1L, 1);

                    b.Property<int?>("LeadId")
                        .HasColumnType("int");

                    b.Property<string>("ProgramName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int");

                    b.Property<int?>("UniversityId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("ProgramTalkId");

                    b.HasIndex("LeadId");

                    b.HasIndex("StudentId");

                    b.HasIndex("UniversityId");

                    b.ToTable("ProgramInTalks");
                });

            modelBuilder.Entity("LegalAndGeneralConsultantCRM.Models.Referrals.Referral", b =>
                {
                    b.Property<int>("ReferralId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReferralId"), 1L, 1);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Contact1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Contact2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Share")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ReferralId");

                    b.ToTable("Referrals");
                });

            modelBuilder.Entity("LegalAndGeneralConsultantCRM.Models.Services.ClubMember", b =>
                {
                    b.Property<int>("ClubMemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClubMemberId"), 1L, 1);

                    b.Property<string>("ContactNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FristName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClubMemberId");

                    b.ToTable("ClubMembers");
                });

            modelBuilder.Entity("LegalAndGeneralConsultantCRM.Models.Services.Service", b =>
                {
                    b.Property<int>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceId"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ServiceId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("LegalAndGeneralConsultantCRM.Models.Students.AcademicRecord", b =>
                {
                    b.Property<int>("StudentAcademiaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentAcademiaId"), 1L, 1);

                    b.Property<DateTime>("CheckDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EducationLevelId")
                        .HasColumnType("int");

                    b.Property<bool>("IsAccepted")
                        .HasColumnType("bit");

                    b.Property<int?>("LeadId")
                        .HasColumnType("int");

                    b.Property<string>("MessageToStudent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("StudentAcademiaId");

                    b.HasIndex("EducationLevelId");

                    b.HasIndex("LeadId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentAcademias");
                });

            modelBuilder.Entity("LegalAndGeneralConsultantCRM.Models.Students.Consultationfee", b =>
                {
                    b.Property<int>("FeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeeId"), 1L, 1);

                    b.Property<double?>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LeadId")
                        .HasColumnType("int");

                    b.Property<string>("ReceiptUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("FeeId");

                    b.ToTable("Consultationfees");
                });

            modelBuilder.Entity("LegalAndGeneralConsultantCRM.Models.Students.Education", b =>
                {
                    b.Property<int>("EducationLevelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EducationLevelId"), 1L, 1);

                    b.Property<string>("Board")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CGPA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DegreeTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Division")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EducationLevel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EducationLevelImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LeadId")
                        .HasColumnType("int");

                    b.Property<string>("MajorSubject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ObjMarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Percentage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SchoolUni")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int");

                    b.Property<string>("TotalMarks")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EducationLevelId");

                    b.HasIndex("LeadId");

                    b.HasIndex("StudentId");

                    b.ToTable("Educations");
                });

            modelBuilder.Entity("LegalAndGeneralConsultantCRM.Models.Students.Student", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentId"), 1L, 1);

                    b.Property<string>("AdditionalInformation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("BloodGroup")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cnic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("Domicile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmergencyAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmergencyContactName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmergencyContactPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmergencyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmergencyPhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GuardianAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GuardianEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GuardianName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GuardianPhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDisable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInternationalStudent")
                        .HasColumnType("bit");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LeadId")
                        .HasColumnType("int");

                    b.Property<string>("Major")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nationality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PermanentAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Relation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TemporaryAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UniversityId")
                        .HasColumnType("int");

                    b.HasKey("StudentId");

                    b.HasIndex("CourseId");

                    b.HasIndex("LeadId");

                    b.HasIndex("UniversityId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("LegalAndGeneralConsultantCRM.Models.Students.StudentEnrollment", b =>
                {
                    b.Property<int>("StudentEnrollmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentEnrollmentId"), 1L, 1);

                    b.Property<DateTime?>("EnrollmentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EnrollmentStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsAccepted")
                        .HasColumnType("bit");

                    b.Property<int?>("LeadId")
                        .HasColumnType("int");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("StudentEnrollmentId");

                    b.HasIndex("LeadId");

                    b.HasIndex("StudentId");

                    b.HasIndex("UserId");

                    b.ToTable("StudentEnrollments");
                });

            modelBuilder.Entity("LegalAndGeneralConsultantCRM.Models.Students.StudentMessage", b =>
                {
                    b.Property<int>("StudentMessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentMessageId"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LeadId")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("StudentMessageId");

                    b.HasIndex("LeadId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentMessages");
                });

            modelBuilder.Entity("LegalAndGeneralConsultantCRM.Models.Universiies.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseId"), 1L, 1);

                    b.Property<string>("Decription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DurationInYears")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("OtherCosts")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("CourseId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("LegalAndGeneralConsultantCRM.Models.Universiies.Incentive", b =>
                {
                    b.Property<int>("IncentiveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IncentiveId"), 1L, 1);

                    b.Property<int?>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IncentiveId");

                    b.HasIndex("CourseId");

                    b.ToTable("Incentives");
                });

            modelBuilder.Entity("LegalAndGeneralConsultantCRM.Models.Universiies.OfferProgram", b =>
                {
                    b.Property<int>("OfferProgramId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OfferProgramId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OfferProgramId");

                    b.ToTable("Programs");
                });

            modelBuilder.Entity("LegalAndGeneralConsultantCRM.Models.Universiies.Scholarship", b =>
                {
                    b.Property<int>("ScholarshipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ScholarshipId"), 1L, 1);

                    b.Property<DateTime?>("ApplicationDeadline")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("EligibilityCriteria")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UniversityId")
                        .HasColumnType("int");

                    b.HasKey("ScholarshipId");

                    b.HasIndex("CourseId");

                    b.HasIndex("UniversityId");

                    b.ToTable("Scholarships");
                });

            modelBuilder.Entity("LegalAndGeneralConsultantCRM.Models.Universiies.University", b =>
                {
                    b.Property<int>("UniversityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UniversityId"), 1L, 1);

                    b.Property<string>("Chancellor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Founded")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OfferProgram")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("OffersInternationalPrograms")
                        .HasColumnType("bit");

                    b.Property<string>("Ranking")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResearchAreas")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UniversityId");

                    b.ToTable("Universities");
                });

            modelBuilder.Entity("LegalAndGeneralConsultantCRM.Models.Universiies.UniversityCourse", b =>
                {
                    b.Property<int?>("UniversityId")
                        .HasColumnType("int");

                    b.Property<int?>("CourseId")
                        .HasColumnType("int");

                    b.Property<decimal?>("TuitionFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("UniversityCourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UniversityCourseId"), 1L, 1);

                    b.HasKey("UniversityId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("UniversityCourses");
                });

            modelBuilder.Entity("LegalAndGeneralConsultantCRM.Models.VisaApplications.VisaApplication", b =>
                {
                    b.Property<int>("ApplicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ApplicationId"), 1L, 1);

                    b.Property<string>("ApplicationNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DestinationCountry")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LeadId")
                        .HasColumnType("int");

                    b.Property<string>("PassportNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SubmissionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("VisaStatus")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ApplicationId");

                    b.HasIndex("LeadId");

                    b.HasIndex("StudentId");

                    b.ToTable("VisaApplications");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("LegalAndGeneralConsultantCRM.Areas.Identity.Data.LegalAndGeneralConsultantCRMUser", b =>
                {
                    b.HasOne("LegalAndGeneralConsultantCRM.Models.Branches.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("LegalAndGeneralConsultantCRM.Models.ActivitiesLog.ActivityLog", b =>
                {
                    b.HasOne("LegalAndGeneralConsultantCRM.Models.Leads.Lead", "Lead")
                        .WithMany()
                        .HasForeignKey("LeadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LegalAndGeneralConsultantCRM.Areas.Identity.Data.LegalAndGeneralConsultantCRMUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lead");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LegalAndGeneralConsultantCRM.Models.CalendarEvents.CalendarEvent", b =>
                {
                    b.HasOne("LegalAndGeneralConsultantCRM.Models.Leads.Lead", "Lead")
                        .WithMany("CalendarEvents")
                        .HasForeignKey("LeadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lead");
                });

            modelBuilder.Entity("LegalAndGeneralConsultantCRM.Models.Deposits.Deposit", b =>
                {
                    b.HasOne("LegalAndGeneralConsultantCRM.Models.Leads.Lead", "Lead")
                        .WithMany()
                        .HasForeignKey("LeadId");

                    b.HasOne("LegalAndGeneralConsultantCRM.Models.Students.Student", "Student")
                        .WithMany("Deposits")
                        .HasForeignKey("StudentId");

                    b.Navigation("Lead");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("LegalAndGeneralConsultantCRM.Models.LeadAssignEmployee", b =>
                {
                    b.HasOne("LegalAndGeneralConsultantCRM.Areas.Identity.Data.LegalAndGeneralConsultantCRMUser", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LegalAndGeneralConsultantCRM.Models.Leads.Lead", "Lead")
                        .WithMany("Assignees")
                        .HasForeignKey("LeadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Lead");
                });

            modelBuilder.Entity("LegalAndGeneralConsultantCRM.Models.LeadFollowUp.FollowUp", b =>
                {
                    b.HasOne("LegalAndGeneralConsultantCRM.Areas.Identity.Data.LegalAndGeneralConsultantCRMUser", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");

                    b.HasOne("LegalAndGeneralConsultantCRM.Models.Leads.Lead", "Lead")
                        .WithMany("FollowUps")
                        .HasForeignKey("LeadId");

                    b.Navigation("Employee");

                    b.Navigation("Lead");
                });

            modelBuilder.Entity("LegalAndGeneralConsultantCRM.Models.Leads.Lead", b =>
                {
                    b.HasOne("LegalAndGeneralConsultantCRM.Models.Referrals.Referral", "Referral")
                        .WithMany()
                        .HasForeignKey("ReferralId");

                    b.Navigation("Referral");
                });

            modelBuilder.Entity("LegalAndGeneralConsultantCRM.Models.Leads.LeadHistory", b =>
                {
                    b.HasOne("LegalAndGeneralConsultantCRM.Models.Leads.Lead", "Lead")
                        .WithMany()
                        .HasForeignKey("LeadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LegalAndGeneralConsultantCRM.Areas.Identity.Data.LegalAndGeneralConsultantCRMUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lead");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LegalAndGeneralConsultantCRM.Models.ProgramsTalk.ProgramInTalk", b =>
                {
                    b.HasOne("LegalAndGeneralConsultantCRM.Models.Leads.Lead", "Lead")
                        .WithMany()
                        .HasForeignKey("LeadId");

                    b.HasOne("LegalAndGeneralConsultantCRM.Models.Students.Student", "Student")
                        .WithMany("ProgramInTalks")
                        .HasForeignKey("StudentId");

                    b.HasOne("LegalAndGeneralConsultantCRM.Models.Universiies.University", "University")
                        .WithMany()
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lead");

                    b.Navigation("Student");

                    b.Navigation("University");
                });

            modelBuilder.Entity("LegalAndGeneralConsultantCRM.Models.Students.AcademicRecord", b =>
                {
                    b.HasOne("LegalAndGeneralConsultantCRM.Models.Students.Education", "Education")
                        .WithMany("AcademicRecords")
                        .HasForeignKey("EducationLevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LegalAndGeneralConsultantCRM.Models.Leads.Lead", "Lead")
                        .WithMany()
                        .HasForeignKey("LeadId");

                    b.HasOne("LegalAndGeneralConsultantCRM.Models.Students.Student", "Student")
                        .WithMany("AcademicRecords")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Education");

                    b.Navigation("Lead");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("LegalAndGeneralConsultantCRM.Models.Students.Education", b =>
                {
                    b.HasOne("LegalAndGeneralConsultantCRM.Models.Leads.Lead", "Lead")
                        .WithMany()
                        .HasForeignKey("LeadId");

                    b.HasOne("LegalAndGeneralConsultantCRM.Models.Students.Student", null)
                        .WithMany("Education")
                        .HasForeignKey("StudentId");

                    b.Navigation("Lead");
                });

            modelBuilder.Entity("LegalAndGeneralConsultantCRM.Models.Students.Student", b =>
                {
                    b.HasOne("LegalAndGeneralConsultantCRM.Models.Universiies.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId");

                    b.HasOne("LegalAndGeneralConsultantCRM.Models.Leads.Lead", "Lead")
                        .WithMany("Students")
                        .HasForeignKey("LeadId");

                    b.HasOne("LegalAndGeneralConsultantCRM.Models.Universiies.University", "University")
                        .WithMany()
                        .HasForeignKey("UniversityId");

                    b.Navigation("Course");

                    b.Navigation("Lead");

                    b.Navigation("University");
                });

            modelBuilder.Entity("LegalAndGeneralConsultantCRM.Models.Students.StudentEnrollment", b =>
                {
                    b.HasOne("LegalAndGeneralConsultantCRM.Models.Leads.Lead", "Lead")
                        .WithMany()
                        .HasForeignKey("LeadId");

                    b.HasOne("LegalAndGeneralConsultantCRM.Models.Students.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId");

                    b.HasOne("LegalAndGeneralConsultantCRM.Areas.Identity.Data.LegalAndGeneralConsultantCRMUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Lead");

                    b.Navigation("Student");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LegalAndGeneralConsultantCRM.Models.Students.StudentMessage", b =>
                {
                    b.HasOne("LegalAndGeneralConsultantCRM.Models.Leads.Lead", "Lead")
                        .WithMany()
                        .HasForeignKey("LeadId");

                    b.HasOne("LegalAndGeneralConsultantCRM.Models.Students.Student", "Student")
                        .WithMany("StudentMessages")
                        .HasForeignKey("StudentId");

                    b.Navigation("Lead");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("LegalAndGeneralConsultantCRM.Models.Universiies.Incentive", b =>
                {
                    b.HasOne("LegalAndGeneralConsultantCRM.Models.Universiies.Course", "Course")
                        .WithMany("Incentives")
                        .HasForeignKey("CourseId");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("LegalAndGeneralConsultantCRM.Models.Universiies.Scholarship", b =>
                {
                    b.HasOne("LegalAndGeneralConsultantCRM.Models.Universiies.Course", "Course")
                        .WithMany("Scholarships")
                        .HasForeignKey("CourseId");

                    b.HasOne("LegalAndGeneralConsultantCRM.Models.Universiies.University", "University")
                        .WithMany("Scholarships")
                        .HasForeignKey("UniversityId");

                    b.Navigation("Course");

                    b.Navigation("University");
                });

            modelBuilder.Entity("LegalAndGeneralConsultantCRM.Models.Universiies.UniversityCourse", b =>
                {
                    b.HasOne("LegalAndGeneralConsultantCRM.Models.Universiies.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LegalAndGeneralConsultantCRM.Models.Universiies.University", "University")
                        .WithMany("UniversityCourses")
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("University");
                });

            modelBuilder.Entity("LegalAndGeneralConsultantCRM.Models.VisaApplications.VisaApplication", b =>
                {
                    b.HasOne("LegalAndGeneralConsultantCRM.Models.Leads.Lead", "Lead")
                        .WithMany()
                        .HasForeignKey("LeadId");

                    b.HasOne("LegalAndGeneralConsultantCRM.Models.Students.Student", "Student")
                        .WithMany("VisaApplications")
                        .HasForeignKey("StudentId");

                    b.Navigation("Lead");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("LegalAndGeneralConsultantCRM.Areas.Identity.Data.LegalAndGeneralConsultantCRMUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("LegalAndGeneralConsultantCRM.Areas.Identity.Data.LegalAndGeneralConsultantCRMUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LegalAndGeneralConsultantCRM.Areas.Identity.Data.LegalAndGeneralConsultantCRMUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("LegalAndGeneralConsultantCRM.Areas.Identity.Data.LegalAndGeneralConsultantCRMUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LegalAndGeneralConsultantCRM.Models.Leads.Lead", b =>
                {
                    b.Navigation("Assignees");

                    b.Navigation("CalendarEvents");

                    b.Navigation("FollowUps");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("LegalAndGeneralConsultantCRM.Models.Students.Education", b =>
                {
                    b.Navigation("AcademicRecords");
                });

            modelBuilder.Entity("LegalAndGeneralConsultantCRM.Models.Students.Student", b =>
                {
                    b.Navigation("AcademicRecords");

                    b.Navigation("Deposits");

                    b.Navigation("Education");

                    b.Navigation("ProgramInTalks");

                    b.Navigation("StudentMessages");

                    b.Navigation("VisaApplications");
                });

            modelBuilder.Entity("LegalAndGeneralConsultantCRM.Models.Universiies.Course", b =>
                {
                    b.Navigation("Incentives");

                    b.Navigation("Scholarships");
                });

            modelBuilder.Entity("LegalAndGeneralConsultantCRM.Models.Universiies.University", b =>
                {
                    b.Navigation("Scholarships");

                    b.Navigation("UniversityCourses");
                });
#pragma warning restore 612, 618
        }
    }
}
